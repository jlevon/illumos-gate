#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
# Copyright (c) 2013, OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2018 Nexenta Systems, Inc.
# Copyright 2020 Joyent, Inc.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

SYMBOL_VERSION ILLUMOS_0.2 {	# reentrant ethers(3SOCKET)
    global:
	ether_aton_r;
	ether_ntoa_r;
} ILLUMOS_0.1;

SYMBOL_VERSION ILLUMOS_0.1 {    # illumos additions
    global:
	accept4			{ TYPE = FUNCTION; FILTER = libc.so.1 };
} SUNW_1.7;

SYMBOL_VERSION SUNW_1.7 {
    global:
	freeifaddrs;
	getifaddrs;
} SUNW_1.6;

SYMBOL_VERSION SUNW_1.6 {
    global:
	getipv4sourcefilter;
	getsourcefilter;
	setipv4sourcefilter;
	setsourcefilter;
} SUNW_1.5;

SYMBOL_VERSION SUNW_1.5 {
    global:
	inet6_opt_append;
	inet6_opt_find;
	inet6_opt_finish;
	inet6_opt_get_val;
	inet6_opt_init;
	inet6_opt_next;
	inet6_opt_set_val;
	inet6_rth_add;
	inet6_rth_getaddr;
	inet6_rth_init;
	inet6_rth_reverse;
	inet6_rth_segments;
	inet6_rth_space;
	sockatmark		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_getaddrinfo;
} SUNW_1.4;

SYMBOL_VERSION SUNW_1.4 {
    global:
	freeaddrinfo;
	gai_strerror;
	getaddrinfo;
	getnameinfo;
	if_freenameindex;
	if_indextoname;
	if_nameindex;
	if_nametoindex;
	in6addr_any;
	in6addr_loopback;
	rcmd_af;
	rexec_af;
	rresvport_af;
} SUNW_1.3;

# Due to mistakes made early in the history of this library, there are
# no SUNW_1.2 or SUNW_1.3 symbols, but they are now kept as placeholders.
# Don't add any symbols to these versions.

SYMBOL_VERSION SUNW_1.3 {
    global:
	SUNW_1.3;
} SUNW_1.2;

SYMBOL_VERSION SUNW_1.2 {
    global:
	SUNW_1.2;
} SUNW_1.1;

SYMBOL_VERSION SUNW_1.1 {
    global:
	__xnet_bind		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_connect		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_getsockopt	{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_listen		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_recvmsg		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_sendmsg		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_sendto		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_socket		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	__xnet_socketpair	{ TYPE = FUNCTION; FILTER = libc.so.1 };
} SUNW_0.7;

SYMBOL_VERSION SUNW_0.7 {
    global:
	endnetent;
	endprotoent;
	endservent;
	ether_aton;
	ether_hostton;
	ether_line;
	ether_ntoa;
	ether_ntohost;
	getnetbyaddr;
	getnetbyaddr_r;
	getnetbyname;
	getnetbyname_r;
	getnetent;
	getnetent_r;
	getprotobyname_r;
	getprotobynumber_r;
	getprotoent_r;
	getservbyname_r;
	getservbyport_r;
	getservent;
	getservent_r;
	htonl			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	htons			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	ntohl			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	ntohs			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	rcmd;
	rexec;
	rresvport;
	ruserok;
	setnetent;
	setprotoent;
	setservent;
	socketpair		{ TYPE = FUNCTION; FILTER = libc.so.1 };

	# For ABI reasons, the following symbols are in SISCD_2.3 on 32-bit
	# sparc, which is inherited by SUNW_0.7. On all other platforms,
	# they are simply in SUNW_0.7
$if _sparc && _ELF32
} SISCD_2.3;

SYMBOL_VERSION SISCD_2.3 {
    global:
$endif
	accept			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	bind			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	connect			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	getpeername		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	getprotobyname;
	getprotobynumber;
	getprotoent;
	getservbyname;
	getservbyport;
	getsockname		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	getsockopt		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	inet_lnaof		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	inet_makeaddr		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	inet_network		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	listen			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	recv			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	recvfrom		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	recvmsg			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	send			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	sendmsg			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	sendto			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	setsockopt		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	shutdown		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	socket			{ TYPE = FUNCTION; FILTER = libc.so.1 };
};

# There really should be only one SUNWprivate version.
# Don't add any more.  Add new private symbols to SUNWprivate_1.3

SYMBOL_VERSION SUNWprivate_1.3 {
    global:
	_accept4		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_link_aton;
	_link_ntoa;
	_nss_initf_ethers;
	_nss_initf_net;
	_nss_initf_netmasks;
	_nss_initf_proto;
	_nss_initf_services;
	getallifaddrs;
	getallifs;
	str2ether;
	str2addr;
	str2netent;
	str2protoent;
} SUNWprivate_1.2;

SYMBOL_VERSION SUNWprivate_1.2 {
    global:
	getnetmaskbyaddr;
	getnetmaskbynet;
} SUNWprivate_1.1;

SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	_accept			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_bind			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	bindresvport;
	bootparams_getbyname;
	_connect		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_getpeername		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_getsockname		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_getsockopt		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_listen			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_recv			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_recvfrom		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_recvmsg		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	rresvport_addr;
	_ruserpass;
	_send			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_sendmsg		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_sendto			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_setsockopt		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_shutdown		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_socket			{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_socket_bsd		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_socketpair		{ TYPE = FUNCTION; FILTER = libc.so.1 };
	_socketpair_bsd		{ TYPE = FUNCTION; FILTER = libc.so.1 };
    local:
	*;
};
